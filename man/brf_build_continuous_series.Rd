% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/processing.R
\name{brf_build_continuous_series}
\alias{brf_build_continuous_series}
\title{Build a continuous futures series with front/next rolls}
\usage{
brf_build_continuous_series(
  ticker_root,
  build_type = c("fwd_rt", "panama"),
  roll_type = days_before_roll(),
  adjusted = TRUE,
  single_xts = TRUE,
  debug = FALSE,
  everything = FALSE,
  use_notional = FALSE,
  data_dir = NULL,
  which = c("cache", "data", "config"),
  source = c("local", "sm_api"),
  include_older = TRUE,
  maturities = "all"
)
}
\arguments{
\item{ticker_root}{Commodity root symbol (e.g. `"DI1"` or `"WIN"`).}

\item{build_type}{Adjustment style applied to the stitched chain. `"fwd_rt"`
(forward-ratio) multiplies the ratio through to subsequent contracts so the
most recent prices remain untouched, while `"panama"` (classic Panama style)
scales historical segments backward so the oldest leg is preserved and
newer legs are shifted.}

\item{roll_type}{Roll specification describing how contracts are stitched.
Supply one of the helper constructors such as [days_before_roll()],
[windsor_log_spread_roll()], [regression_roll()], or [custom_roll()], or
provide a custom function that matches the legacy seam interface.}

\item{adjusted}{When `TRUE`, return the back-adjusted continuous series;
otherwise the unadjusted (stitched) series is returned.}

\item{single_xts}{If `TRUE`, return a single xts object; when `FALSE`, return
a named list containing the series.}

\item{debug}{If `TRUE`, emit summary information about cumulative and
annualised returns for the continuous series.}

\item{everything}{When `TRUE`, return a list containing the aggregate data,
the unadjusted series, the adjusted series, and the daily contract table.}

\item{use_notional}{When `TRUE`, stitch contracts using notional columns
(`PU_o`, `PU_h`, `PU_l`, `PU_c`), or the `NO_*` equivalents when PU fields
are absent. The returned series keeps DI rates in the OHLC slots and adds
the blended notional columns alongside them.}

\item{data_dir}{Optional directory containing cached files for `ticker_root`.}

\item{which}{Storage location passed to [tools::R_user_dir()] when
`data_dir` is `NULL`.}

\item{source}{Data source to build the series from: `"local"` reads cached
aggregates via [brf_get_aggregate()] while `"sm_api"` attempts to call
`sm_get_data()` (when available) and falls back to the local cache with a
warning.}

\item{include_older}{When `TRUE`, legacy contracts whose symbols use
Portuguese month abbreviations (e.g. `"BGIABR1"`) are normalised to their
modern equivalents so they participate in the roll chain. Set to `FALSE`
to keep only modern `"BGIZ01"`-style contracts.}

\item{maturities}{Optional vector of month codes (e.g. `c("F", "U")`) to
restrict the chain to specific maturities. Use `"all"` (default) to keep
every available contract month.}
}
\value{
By default, invisibly returns an xts object. When `single_xts` is
  `FALSE`, returns a named list containing the requested series; when
  `everything` is `TRUE`, returns a list with the aggregate data, the
  unadjusted chain, the adjusted chain, and the daily contract metadata.
}
\description{
Construct a continuous daily series for a futures ticker root by rolling
from the front contract into the next contract a fixed number of business
days before the estimated maturity.
}
\details{
The function automatically merges legacy naming conventions from the
  B3 bulletins. Portuguese month suffixes are mapped to standard CME-style
  month codes when `include_older = TRUE`, and ticker-root aliases (such as
  the historical `"ICN"` commodity root for what is now traded as `"CCM"` or
  `"BOI"` for `"BGI"`) are consolidated before the roll logic runs. This keeps
  historical data continuous through renames without requiring manual
  preprocessing.

  Supplying `target_days_to_maturity` via `roll_control` instructs the roll
  engine to favour contracts whose business-day tenor is closest to the
  target. This is particularly helpful for DI futures when paired with
  `use_notional = TRUE` and a seam column such as `"PU_c"`, yielding
  constant-tenor notional chains suitable for backtesting.
}
